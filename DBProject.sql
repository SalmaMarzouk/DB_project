-- MySQL Script generated by MySQL Workbench
-- Sun Jun 13 16:47:27 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BookStore
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BookStore` ;

-- -----------------------------------------------------
-- Schema BookStore
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BookStore` DEFAULT CHARACTER SET utf8 ;
USE `BookStore` ;

-- -----------------------------------------------------
-- Table `BookStore`.`Publisher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BookStore`.`Publisher` (
  `name` VARCHAR(25) NOT NULL,
  `address` VARCHAR(100) NOT NULL,
  `telephone` VARCHAR(14) NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BookStore`.`Book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BookStore`.`Book` (
  `ISBN` VARCHAR(25) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `author` VARCHAR(45) NOT NULL,
  `publisher` VARCHAR(45) NOT NULL,
  `publication_year` DATE NOT NULL,
  `selling_price` DECIMAL(10,2) NOT NULL,
  `category` ENUM('Science', 'Art', 'Religion', 'History', 'Geography') NOT NULL,
  `stock` INT NOT NULL,
  `threshold` INT NOT NULL,
  PRIMARY KEY (`ISBN`),
  FULLTEXT INDEX `author_index` (`author`) VISIBLE,
  FULLTEXT INDEX `publisher_index` (`publisher`) VISIBLE,
  INDEX `category_index` (`category` ASC) VISIBLE,
  FULLTEXT INDEX `title_index` (`title`) VISIBLE,
  CONSTRAINT `publisher_fk`
    FOREIGN KEY (`publisher`)
    REFERENCES `BookStore`.`Publisher` (`name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BookStore`.`Book_orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BookStore`.`Book_orders` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ISBN` VARCHAR(25) NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `ISBN_fk_idx` (`ISBN` ASC) VISIBLE,
  CONSTRAINT `ISBN_fk`
    FOREIGN KEY (`ISBN`)
    REFERENCES `BookStore`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BookStore`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BookStore`.`User` (
  `username` VARCHAR(25) NOT NULL,
  `password` VARCHAR(25) NOT NULL,
  `last_name` VARCHAR(25) NOT NULL,
  `first_name` VARCHAR(25) NOT NULL,
  `email` VARCHAR(30) NOT NULL,
  `phone` VARCHAR(14) NOT NULL,
  `shipping_address` VARCHAR(100) NOT NULL,
  `type` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`username`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BookStore`.`cart_item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BookStore`.`cart_item` (
  `id` INT NOT NULL auto_increment,
  `Book_isbn` VARCHAR(25) NOT NULL,
  `username` VARCHAR(25) NULL,
  PRIMARY KEY (`id`),
  INDEX `book_item_fk_idx` (`Book_isbn` ASC) VISIBLE,
  INDEX `item_username_fk_idx` (`username` ASC) VISIBLE,
  CONSTRAINT `book_item_fk`
    FOREIGN KEY (`Book_isbn`)
    REFERENCES `BookStore`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `item_username_fk`
    FOREIGN KEY (`username`)
    REFERENCES `BookStore`.`User` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BookStore`;

DELIMITER $$
USE `BookStore`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BookStore`.`Book_BEFORE_UPDATE` BEFORE UPDATE ON `Book` FOR EACH ROW
BEGIN
IF(NEW.stock < 0) THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'NOT ENOUGH STOCK FOR THIS BOOK!';
END IF;
END$$

USE `BookStore`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BookStore`.`Book_AFTER_UPDATE` AFTER UPDATE ON `Book` FOR EACH ROW
BEGIN
DECLARE tmp int;
IF(NEW.stock < OLD.stock) THEN
IF (NEW.stock < NEW.threshold) THEN
SELECT SUM(Book_orders.quantity) INTO tmp FROM Book_orders WHERE Book_orders.ISBN = NEW.ISBN;
IF (isnull(tmp)) THEN
SET TMP = 0;
END IF;
INSERT INTO Book_orders (ISBN,quantity) VALUES (NEW.ISBN,NEW.threshold-NEW.stock-tmp);
END IF;
END IF;
END$$

USE `BookStore`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BookStore`.`Book_orders_BEFORE_DELETE` BEFORE DELETE ON `Book_orders` FOR EACH ROW
BEGIN
UPDATE Book SET stock = stock + OLD.quantity WHERE Book.ISBN = OLD.ISBN;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Add_Book` ( isbn_p varchar(25),  title_p varchar(45),  author_p varchar(45), publisher_p varchar(45), pubYear_p date,  price_p decimal(10,2), category_p ENUM('Science', 'Art', 'Religion', 'History', 'Geography'), stock_p int,  threshold_p int )
BEGIN
INSERT INTO Book VALUES (isbn_p, title_p, author_p, publisher_p, pubYear_p, price_p,category_p,stock_p, threshold_p);
END$$

USE `BookStore`$$
CREATE PROCEDURE `Modify_Book` ( isbn_p varchar(25), stock_p int )
BEGIN
UPDATE Book SET stock = stock_p WHERE ISBN = isbn_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Dec_Book` ( isbn_p varchar(25) )
BEGIN
UPDATE Book SET stock = stock - 1   WHERE ISBN = isbn_p;
END$$


USE `BookStore`$$
CREATE PROCEDURE `Confirm_Order` (id_p INT)
BEGIN
DELETE FROM Book_orders where id = id_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Search_by_isbn` (isbn_p varchar(25))
BEGIN
SELECT ISBN ,title,author,selling_price FROM Book where ISBN = isbn_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Search_by_title` (title_p varchar(45))
BEGIN
SELECT ISBN ,title,author,selling_price  FROM Book where title like CONCAT('%',title_p,'%');
END$$

USE `BookStore`$$
CREATE PROCEDURE `Search_by_author` (author_p varchar(45))
BEGIN
SELECT ISBN ,title,author,selling_price FROM Book where author like CONCAT('%',author_p,'%');
END$$

USE `BookStore`$$
CREATE PROCEDURE `Search_by_publisher` (publisher_p varchar(45))
BEGIN
SELECT ISBN ,title,author,selling_price FROM Book where publisher like CONCAT('%',publisher_p,'%');
END$$

USE `BookStore`$$
CREATE PROCEDURE `Search_by_category` (category_p ENUM('Science', 'Art', 'Religion', 'History', 'Geography'))
BEGIN
SELECT ISBN ,title,author,selling_price FROM Book where category = category_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Authenticate` (username_p varchar(25), password_p varchar(25),out type_p varchar(25))
BEGIN
SELECT `type` into type_p FROM `User` WHERE username = username_p and `password` = password_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `get_type` (username_p varchar(25) ,out type_p varchar(25))
BEGIN
SELECT `type` into type_p FROM `User` WHERE username = username_p;
END$$


USE `BookStore`$$
CREATE PROCEDURE `Insert_into_cart` (username_p varchar(25), isbn_p varchar(25),out id_p int)
BEGIN
INSERT INTO cart_item (Book_isbn,username) VALUES(isbn_p,username_p);
SET id_p = LAST_INSERT_ID();
END$$

USE `BookStore`$$
CREATE PROCEDURE `Remove_from_cart` (id_p int)
BEGIN
DELETE FROM cart_item where id = id_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `Empty_cart` (username_p varchar(25))
BEGIN
DELETE FROM cart_item where username = username_p;
END$$

USE `BookStore`$$
CREATE PROCEDURE `retrive_cart` (username_p varchar(25))
BEGIN
SELECT cart_item.id , Book.ISBN ,Book.title,Book.author,Book.selling_price FROM cart_item,Book where username = username_p and Book.ISBN = cart_item.Book_isbn;
END$$

USE `BookStore`$$
CREATE PROCEDURE `update_user_info` (username_p VARCHAR(25), password_p VARCHAR(25) ,last_name_p VARCHAR(25) ,first_name_p VARCHAR(25),email_p VARCHAR(30),
phone_p VARCHAR(14) ,shipping_address_p VARCHAR(100),type_p VARCHAR(25))
BEGIN
UPDATE `User` SET `password` = password_p , last_name = last_name_p , first_name = first_name_p, email = email_p, phone = phone_p,
shipping_address = shipping_address_p where `User`.username = username_p;
 
END$$

USE `BookStore`$$
CREATE PROCEDURE `insert_user` (username_p VARCHAR(25), password_p VARCHAR(25) ,last_name_p VARCHAR(25) ,first_name_p VARCHAR(25),email_p VARCHAR(30),
phone_p VARCHAR(14) ,shipping_address_p VARCHAR(100),type_p VARCHAR(25))
BEGIN
INSERT INTO `User` VALUES(username_p,password_p,last_name_p,first_name_p,email_p,phone_p,shipping_address_p,type_p);

END$$

USE `BookStore`$$
CREATE PROCEDURE `retrive_user_info` (username_p VARCHAR(25))
BEGIN
SELECT * FROM `User` where username = username_p;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
